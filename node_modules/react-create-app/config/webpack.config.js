const config = require('../package.json');

const webpack = require('webpack');
const CleanPlugin = require('clean-webpack-plugin');
const BabiliPlugin = require('babili-webpack-plugin');
const NotifierPlugin = require('webpack-notifier');
const VisualizerPlugin = require('webpack-visualizer-plugin');

const webpackConfig = {
    entry: './index.js',
    output: {
        filename: 'dist/index.min.js',
        libraryTarget: 'umd',
        publicPath: '/',
    },
    externals: ['react', 'react-redux'],
    plugins: [
        new CleanPlugin(['./build', './dist'], { root: `${__dirname}/../`, verbose: true }),
        new webpack.optimize.OccurrenceOrderPlugin(),
        new webpack.NamedModulesPlugin(),
        new webpack.NoEmitOnErrorsPlugin(),
        new VisualizerPlugin({ filename: './dist/webpack-stats.html' }),
        new NotifierPlugin({ title: config.name, alwaysNotify: true }),
    ],
    module: {
        rules: [{
            test: [/\.js$/i],
            exclude: /node_modules/,
            use: [{
                loader: 'babel-loader',
            },{
                loader: 'eslint-loader',
            },{
                loader: 'string-replace-loader',
                query: {
                    search: '.+?//@hide$',
                    flags: 'gim',
                    replace: '',
                },
            }],
        },{
            test: [/\.woff$/i, /\.woff2$/i],
            use: [{
                loader: 'url-loader',
                options: {
                    limit: 15000,
                    mimetype: 'application/font-woff',
                    name: 'dist/assets/fonts/[hash:base64:12].[ext]',
                },
            }],
        },{
            test: [/\.ttf$/i, /\.eot$/i],
            use: [{
                loader: 'url-loader',
                options: {
                    limit: 15000,
                    mimetype: 'application/octet-stream',
                    name: 'dist/assets/fonts/[hash:base64:12].[ext]',
                },
            }],
        },{
            test: [/\.(jpg|jpeg|png|gif|svg)$/i],
            use: [{
                loader: 'url-loader',
                options: {
                    limit: 15000,
                    name: './dist/assets/images/[hash:base64:12].[ext]',
                }
            }]
        },{
            test: [/\.json$/i],
            use: [{
                loader: 'json-loader',
            }],
        }],
    }
};

if(process.env.NODE_ENV == 'development') {
    webpackConfig.devtool = 'inline-source-map';

    webpackConfig.plugins = webpackConfig.plugins.concat([
        new webpack.DefinePlugin({
            'process.env': { NODE_ENV: JSON.stringify('development') },
        }),
    ]);
}
else {
    webpackConfig.devtool = 'source-map';

    webpackConfig.plugins = webpackConfig.plugins.concat([
        new webpack.DefinePlugin({
            'process.env': { NODE_ENV: JSON.stringify('production') },
        }),
        new BabiliPlugin(),
    ]);
}

module.exports = webpackConfig;
